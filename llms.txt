# Project Context for LLM Assistants

> This project demonstrates a client-server architecture using the MCP (Model Context Protocol). A client application (found in `distiller_cm5_python/client/`) interacts with various `mcp_server` implementations. The client utilizes configurable LLM interaction logic (primarily in `distiller_cm5_python/client/mid_layer/`) which connects to an LLM service (like the one in `llm_server/` or an external API like OpenRouter) to process user queries and decide whether to respond directly or make tool calls to a connected `mcp_server`.

This `llms.txt` file aims to guide Large Language Models (LLMs) in understanding the project structure, particularly for creating new `mcp_server` implementations.

## Related Repositories

*   **This Repository (Python Framework):** [Pamir-AI/distiller-cm5-python](https://github.com/Pamir-AI/distiller-cm5-python)
*   **SDK (Whisper, Piper, etc.):** [Pamir-AI/distiller-cm5-sdk](https://github.com/Pamir-AI/distiller-cm5-sdk)
*   **Firmware (RP2040):** [Pamir-AI/distiller-cm5-firmware](https://github.com/Pamir-AI/distiller-cm5-firmware)
*   **Kernel (Linux):** [Pamir-AI/Distiller-CM5-Kernel](https://github.com/Pamir-AI/Distiller-CM5-Kernel)

## Core Interaction Flow

1.  User query goes to the client (`client/ui/App.py` or `client/cli.py`).
2.  The client's mid-layer (`client/mid_layer/mcp_client.py`) sends the query (with history and available tools) to the configured LLM service via logic in `client/mid_layer/llm_client.py`.
3.  The LLM service (e.g., `llm_server/` or OpenRouter) processes the request and responds.
4.  If the LLM response includes tool calls, the client's `mcp_client.py` executes them by sending requests to the connected `mcp_server` process (specified by `--server-script`).
5.  The `mcp_server` executes the tool logic and returns results to the `mcp_client`.
6.  `mcp_client` sends tool results back to the LLM service for a final response.
7.  `mcp_client` relays the final response to the UI or CLI for display.

## Hardware Environment

The MCP client and server will be running on hardware based on the Raspberry Pi Compute Module 5 (CM5). Understanding the available hardware interfaces is crucial for developing effective MCP server implementations.

### Hardware Overview

The system includes:
- Raspberry Pi Compute Module 5 as the main processing unit
- Audio codec (TLV320AIC3204IRHBR) for audio processing
- RP2040 microcontroller connected via UART2 interface
- Camera and display MIPI connectors
- SPI-based E-Ink Display with custom BSP Linux driver

### GPIO and Hardware Interfaces

When implementing an MCP server that controls hardware:

1. **GPIO Access**: Use the `lgpio` Python library for GPIO operations. This should be the only GPIO library utilized in MCP server implementations for:
   - Digital input/output (HIGH/LOW states)
   - PWM control
   - GPIO event detection

2. **Available Interfaces**:
   - GPIO pins from the CM5 (up to 28 pins, supporting either 1.8V or 3.3V signaling)
   - UART2 for communication with the RP2040 microcontroller (via GPIO4 & GPIO5)
   - SPI interface for the E-Ink display (accessed via custom Linux driver)
   - IÂ²C interfaces for various peripherals
   - MIPI interfaces for camera and display connections
   - I2S interfaces for the audio codec (TLV320AIC3204IRHBR)

3. **Hardware Considerations**:
   - GPIO voltage levels must be respected (either 1.8V or 3.3V depending on GPIO_VREF setting)
   - Total GPIO load should be kept below 50mA
   - The `lgpio` library handles the hardware-specific details of the CM5's GPIO system

### Configuration of Alternative Functions with config.txt

Many GPIO alternative functions require explicit configuration in the Raspberry Pi's `/boot/firmware/config.txt` file before they can be used. This system configuration file controls low-level hardware settings and must be edited to enable certain hardware interfaces or change pin functions.

**Important:** Before attempting to use alternative GPIO functions, MCP servers should:

1. Check if the required function is already enabled in config.txt
2. If not enabled, inform the user about the necessary configuration changes
3. Never attempt to modify config.txt directly from the MCP server (this requires root permissions and a reboot)

Common config.txt entries that affect GPIO functionality include:

```
# Enable I2C interfaces
dtparam=i2c_arm=on
dtparam=i2c1=on

# Enable SPI
dtparam=spi=on

# Enable specific UART interfaces (UART0 is enabled by default)
dtoverlay=uart2
dtoverlay=uart3
dtoverlay=uart4
dtoverlay=uart5

# Enable hardware PWM
dtoverlay=pwm
dtoverlay=pwm-2chan

# Enable I2S audio
dtoverlay=i2s-mmap

# GPIO pin function configuration
gpio=2-3=a2  # Set GPIO2 and GPIO3 to alt2 function
```

A system reboot is required after any changes to config.txt before the new settings take effect. MCP server implementations should document any config.txt requirements in their documentation.

### GPIO Pin Availability and Alternative Functions

Each GPIO pin on the Raspberry Pi CM5 can be configured for multiple functions (alt0 through alt8). The table below shows the current system functions and alternative functions for each pin, along with their availability for MCP server use.

| GPIO | Current Function | Available | Alt0 | Alt1 | Alt2 | Alt3 | Alt4 | Alt5 | Alt6 | Alt7 | Alt8 |
|------|------------------|-----------|------|------|------|------|------|------|------|------|------|
| 0    | ID_SD (EEPROM) | No | SPI0_SIO[3] | DPI_PCLK | UART1_TX | I2C0_SDA | | SYS_RIO[0] | PROC_RIO[0] | PIO[0] | SPI2_CSn[0] |
| 1    | ID_SC (EEPROM) | No | SPI0_SIO[2] | DPI_DE | UART1_RX | I2C0_SCL | | SYS_RIO[1] | PROC_RIO[1] | PIO[1] | SPI2_SIO[1] |
| 2    | I2C SDA1 (E-Ink touch) | Yes | SPI0_CSn[3] | DPI_VSYNC | UART1_CTS | I2C1_SDA | UART0_IR_RX | SYS_RIO[2] | PROC_RIO[2] | PIO[2] | SPI2_SIO[0] |
| 3    | I2C SCL1 (E-Ink touch) | Yes | SPI0_CSn[2] | DPI_HSYNC | UART1_RTS | I2C1_SCL | UART0_IR_TX | SYS_RIO[3] | PROC_RIO[3] | PIO[3] | SPI2_SCLK |
| 4    | UART_TXD2 (microcontroller) | No | GPCLK[0] | DPI_D[0] | UART2_TX | I2C2_SDA | UART0_RI | SYS_RIO[4] | PROC_RIO[4] | PIO[4] | SPI3_CSn[0] |
| 5    | UART_RXD2 (microcontroller) | No | GPCLK[1] | DPI_D[1] | UART2_RX | I2C2_SCL | UART0_DTR | SYS_RIO[5] | PROC_RIO[5] | PIO[5] | SPI3_SIO[1] |
| 6    | I2S Master Clock (Codec) | No | GPCLK[2] | DPI_D[2] | UART2_CTS | I2C3_SDA | UART0_DCD | SYS_RIO[6] | PROC_RIO[6] | PIO[6] | SPI3_SIO[0] |
| 7    | E-Ink Data Command Pin | No | SPI0_CSn[1] | DPI_D[3] | UART2_RTS | I2C3_SCL | UART0_DSR | SYS_RIO[7] | PROC_RIO[7] | PIO[7] | SPI3_SCLK |
| 8    | E-Ink SPI Chip Select | No | SPI0_CSn[0] | DPI_D[4] | UART3_TX | I2C0_SDA | | SYS_RIO[8] | PROC_RIO[8] | PIO[8] | SPI4_CSn[0] |
| 9    | E-Ink BUSY pin | No | SPI0_SIO[1] | DPI_D[5] | UART3_RX | I2C0_SCL | | SYS_RIO[9] | PROC_RIO[9] | PIO[9] | SPI4_MISO |
| 10   | E-Ink SPI MOSI | No | SPI0_SIO[0] | DPI_D[6] | UART3_CTS | I2C1_SDA | | SYS_RIO[10] | PROC_RIO[10] | PIO[10] | SPI4_MOSI |
| 11   | E-Ink SPI Clock | No | SPI0_SCLK | DPI_D[7] | UART3_RTS | I2C1_SCL | | SYS_RIO[11] | PROC_RIO[11] | PIO[11] | SPI4_SCLK |
| 12   | Not Used | Yes | PWM0[0] | DPI_D[8] | UART4_TX | I2C2_SDA | AUDIO_OUT_L | SYS_RIO[12] | PROC_RIO[12] | PIO[12] | SPI5_CSn[0] |
| 13   | E-Ink RESET | No | PWM0[1] | DPI_D[9] | UART4_RX | I2C2_SCL | AUDIO_OUT_R | SYS_RIO[13] | PROC_RIO[13] | PIO[13] | SPI5_SIO[1] |
| 14   | Not Used | Yes | PWM0[2] | DPI_D[10] | UART4_CTS | I2C3_SDA | UART0_TX | SYS_RIO[14] | PROC_RIO[14] | PIO[14] | SPI5_SIO[0] |
| 15   | Not Used | Yes | PWM0[3] | DPI_D[11] | UART4_RTS | I2C3_SCL | UART0_RX | SYS_RIO[15] | PROC_RIO[15] | PIO[15] | SPI5_SCLK |
| 16   | SAM_BOOT (RP2040 OTA) | No | SPI1_CSn[2] | DPI_D[12] | | | UART0_CTS | SYS_RIO[16] | PROC_RIO[16] | PIO[16] | |
| 17   | E-Ink Touch Interrupt | Yes | SPI1_CSn[1] | DPI_D[13] | | | UART0_RTS | SYS_RIO[17] | PROC_RIO[17] | PIO[17] | |
| 18   | I2S BCLK for Codec | No | SPI1_CSn[0] | DPI_D[14] | I2S0_SCLK | PWM0[2] | I2S1_SCLK | SYS_RIO[18] | PROC_RIO[18] | PIO[18] | GPCLK[1] |
| 19   | I2S LRCLK for Codec | No | SPI1_SIO[1] | DPI_D[15] | I2S0_WS | PWM0[3] | I2S1_WS | SYS_RIO[19] | PROC_RIO[19] | PIO[19] | |
| 20   | I2S_DIN (PCM Codec Data) | No | SPI1_SIO[0] | DPI_D[16] | I2S0_SDI[0] | GPCLK[0] | I2S1_SDI[0] | SYS_RIO[20] | PROC_RIO[20] | PIO[20] | |
| 21   | I2S_DOUT (PCM Codec Data) | No | SPI1_SCLK | DPI_D[17] | I2S0_SDO[0] | GPCLK[1] | I2S1_SDO[0] | SYS_RIO[21] | PROC_RIO[21] | PIO[21] | |
| 22   | SAM Interrupt Pin | Yes | SDIO0_CLK | DPI_D[18] | I2S0_SDI[1] | I2C3_SDA | I2S1_SDI[1] | SYS_RIO[22] | PROC_RIO[22] | PIO[22] | |
| 23   | Not Used | Yes | SDIO0_CMD | DPI_D[19] | I2S0_SDO[1] | I2C3_SCL | I2S1_SDO[1] | SYS_RIO[23] | PROC_RIO[23] | PIO[23] | |
| 24   | Not Used | Yes | SDIO0_DAT[0] | DPI_D[20] | I2S0_SDI[2] | | I2S1_SDI[2] | SYS_RIO[24] | PROC_RIO[24] | PIO[24] | SPI2_CSn[1] |
| 25   | Not Used | Yes | SDIO0_DAT[1] | DPI_D[21] | I2S0_SDO[2] | AUDIO_IN_CLK | I2S1_SDO[2] | SYS_RIO[25] | PROC_RIO[25] | PIO[25] | SPI3_CSn[1] |
| 26   | Codec RESET PIN | No | SDIO0_DAT[2] | DPI_D[22] | I2S0_SDI[3] | AUDIO_IN_DAT0 | I2S1_SDI[3] | SYS_RIO[26] | PROC_RIO[26] | PIO[26] | SPI5_CSn[1] |
| 27   | E-Ink Touch Reset | Yes | SDIO0_DAT[3] | DPI_D[23] | I2S0_SDO[3] | AUDIO_IN_DAT1 | I2S1_SDO[3] | SYS_RIO[27] | PROC_RIO[27] | PIO[27] | SPI1_CSn[1] |

MCP servers should only use GPIO pins marked as "Yes" in the "Available" column. When designing tools that require GPIO access, developers should:

1. Be aware of the alternative functions available for each GPIO pin
2. Check if the desired function requires configuration in config.txt
3. Detect when unavailable pins are requested and suggest alternatives if possible
4. Document any required config.txt modifications in their server documentation

When developing an MCP server to control hardware components, ensure your tools follow these specifications for optimal compatibility and reliability. Server implementations should document which GPIO pins or interfaces they require.

## Client Core Logic (See `distiller_cm5_python/client/README.md`)

-   `distiller_cm5_python/client/mid_layer/mcp_client.py`: Core client class managing the MCP connection to a server, sending queries to the LLM service, and dispatching tool calls.
-   `distiller_cm5_python/client/mid_layer/llm_client.py`: Handles interaction logic with the configured LLM backend (local `llm_server` via HTTP, OpenRouter, etc.).
-   `distiller_cm5_python/client/mid_layer/processors.py`: Contains `MessageProcessor` (manages conversation history) and `ToolProcessor` (parses tool calls and interacts with `mcp_client.py`).
-   The client also has UI (`client/ui/`) and CLI (`client/cli.py`) components that use the `mid_layer`.

## MCP Server Examples (See `distiller_cm5_python/mcp_server/README.md`)

-   `distiller_cm5_python/mcp_server/`: Contains example MCP server implementations using the `mcp` library's stdio server capabilities. **To create a new server, model it after these examples.**
-   `distiller_cm5_python/mcp_server/talk_server.py`: Example server providing a `speak_text` tool using the `distiller_cm5_sdk` (Piper TTS).
-   `distiller_cm5_python/mcp_server/wifi_server.py`: Example server providing WiFi network tools (`get_wifi_networks`, `connect_to_wifi`, etc.) for Linux using `nmcli`.

## Configuration & Utilities (See `distiller_cm5_python/utils/README.md`)

-   `distiller_cm5_python/utils/config.py`: Handles loading configuration (defaults, file, environment variables).
-   `distiller_cm5_python/utils/default_config.json`: Default configuration values.
-   `distiller_cm5_python/utils/logger.py`: Sets up standardized logging via `setup_logging()`.
-   `distiller_cm5_python/utils/distiller_exception.py`: Defines custom exceptions (`UserVisibleError`, `LogOnlyError`).

## Supporting Components

-   `distiller_cm5_python/llm_server/`: Contains a FastAPI server (`llm_server/server.py`) that wraps `llama-cpp-python` to provide an OpenAI-compatible API endpoint. This can be used as one option for the LLM backend. See `llm_server/README.md`.
-   `main.py`: The main project entry point script. Parses arguments (`--gui`), optionally manages a local `llama-cpp` server if configured (`PROVIDER_TYPE=llama-cpp`), and launches either the GUI (`client/ui/App.py`) or CLI (`client/cli.py`) client.
-   `distiller_cm5_sdk`: An external, installable package providing components like Whisper and Piper wrappers. See [Pamir-AI/distiller-cm5-sdk](https://github.com/Pamir-AI/distiller-cm5-sdk).

## Creating a New MCP Server

This section guides an AI coder in creating a new MCP server script (e.g., `my_new_device_server.py`) that can communicate with the client via stdio, following the pattern established in existing examples like `talk_server.py` or `wifi_server.py`.

**Goal:** Implement a Python script using `mcp.server` that listens for MCP requests on stdin/stdout, advertises its tools, and executes the corresponding logic when requested.

**Key Requirements:**

1.  **Define Tools:** You MUST be provided with the specific tools the server should offer, including:
    *   `name`: The function name the LLM will call.
    *   `description`: A clear explanation of what the tool does and when to use it.
    *   `inputSchema`: A JSON schema object defining the arguments the tool accepts. Use an empty dict `{}` if no arguments are needed.
    *   **Logic:** The actual Python code to execute when the tool is called.

2.  **Use `mcp` Library:** The server MUST use the `mcp.server` module and `mcp.types` for defining capabilities and handling requests. Ensure the library is accessible in the Python environment.

3.  **Dependencies:** If the server uses components from `distiller_cm5_sdk` (like Piper TTS), ensure the SDK is installed in the environment.

**Boilerplate Structure (Based on `talk_server.py`):**

```python
#!/usr/bin/env python3
import asyncio
import logging
import sys
import nest_asyncio # May be needed in some environments

# Core MCP components
from mcp.server import Server, NotificationOptions
from mcp.server.models import InitializationOptions
import mcp.types as types
import mcp.server.stdio

# Optional: Import standard logger setup
# from distiller_cm5_python.utils.logger import setup_logging
# setup_logging() # Call if using standard setup

# Optional: Import SDK components if needed
# from distiller_cm5_sdk.piper import Piper

# Apply nest_asyncio if needed
nest_asyncio.apply()

# Setup basic logging (or use standard logger)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("MyNewMCPServer") # Use a specific server name

# --- Server Instance --- (Instantiate Server early)
server = Server("MyNewMCPServer-InternalID") # Internal ID, name set in InitializationOptions

# --- Tool Definition --- (Define all tools in one function)
@server.list_tools()
async def handle_list_tools() -> list[types.Tool]:
    """Lists all tools provided by this server."""
    return [
        types.Tool(
            name="my_tool_name", # Must match the LLM call name
            description="Description of what my_tool_name does.", # CHANGE THIS
            inputSchema={
                "type": "object",
                "properties": {
                    "argument_name_1": {
                        "type": "string", # or "number", "boolean", etc.
                        "description": "Description of this argument." # CHANGE THIS
                    },
                    # Add more arguments as needed
                },
                "required": ["argument_name_1"], # List required arguments
                # Use {} if no arguments are needed
            }
        ),
        # Add more types.Tool(...) definitions here for other tools
    ]

# --- Optional: Prompt Definition --- (If the server provides prompts)
@server.list_prompts()
async def list_prompts() -> list[types.Prompt]:
    """Lists all prompts provided by this server (optional capability)."""
    return [
        types.Prompt(
            name="my_server_assistant_prompt", # Unique name for the prompt
            description="A prompt to guide the LLM on how to use this server's tools.", # CHANGE THIS
            arguments=[], # Define if the prompt accepts arguments to customize content
        )
        # Add more types.Prompt definitions here if needed
    ]

# --- Optional: Prompt Handling --- (If the server provides prompts)
@server.get_prompt()
async def get_prompt(
    name: str, arguments: dict[str, str] | None = None
) -> types.GetPromptResult:
    """Handles requests for specific prompt content (required if list_prompts is defined)."""
    logger.info(f"Received request for prompt '{name}' with arguments: {arguments}")
    if name == "my_server_assistant_prompt":
        # TODO: Construct the actual prompt content here.
        # This often involves defining a system message or example conversations.
        prompt_content = "System: You are an assistant designed to control MyNewMCPServer. Use 'my_tool_name' to achieve X." # CHANGE THIS
        messages = [
            types.PromptMessage(role="system", content=types.TextContent(type="text", text=prompt_content))
            # Can also add example user/assistant/tool_call messages here
        ]
        return types.GetPromptResult(messages=messages, description="Generated prompt for MyNewMCPServer")
    else:
        logger.error(f"Unknown prompt requested: {name}")
        # Return empty result or raise error if prompt name is not found
        return types.GetPromptResult(messages=[], description=f"Prompt '{name}' not found")

# --- Tool Implementation/Handling --- (Single dispatcher function)
@server.call_tool()
async def handle_call_tool(
    name: str,
    arguments: dict | None
) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]: # Adjust return types if needed
    """Handles incoming tool calls by dispatching to the correct logic."""
    if not arguments:
        arguments = {}

    logger.info(f"Executing tool '{name}' with arguments: {arguments}")

    try:
        if name == "my_tool_name":
            # TODO: Implement the actual logic for 'my_tool_name' here
            # Example: access hardware, call system commands, read files etc.
            # If using SDK: e.g., piper_instance.speak_stream(arguments.get('text'))
            arg1 = arguments.get('argument_name_1')
            # ... process arguments ...
            result_text = f"Successfully executed my_tool_name with {arg1}"
            logger.info(f"Tool '{name}' result: {result_text}")
            # Return result as a list of Content objects
            return [types.TextContent(type="text", text=result_text)]

        # elif name == "another_tool_name":
        #     # TODO: Implement logic for another_tool_name
        #     result_text = "Executed another_tool_name"
        #     return [types.TextContent(type="text", text=result_text)]

        else:
            logger.error(f"Unknown tool called: {name}")
            raise ValueError(f"unknown tool: {name}")

    except Exception as e:
        error_message = f"Error executing tool '{name}': {str(e)}"
        logger.error(error_message, exc_info=True)
        # Return an error message within the expected result structure
        return [types.TextContent(type="text", text=error_message)]

# --- Server Execution --- (Main run loop)
async def run():
    """Sets up and runs the MCP server using stdio."""
    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
        logger.info(f"Starting MyNewMCPServer via stdio...")
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                # --- IMPORTANT: Set Server Info Here ---
                server_name="MyNewMCPServer", # CHANGE THIS - User-facing name
                server_version="0.1.0",     # CHANGE THIS - Server version
                capabilities=server.get_capabilities(
                    # Define other capabilities like prompts, resources if needed
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
            ),
        )

if __name__ == "__main__":
    try:
        asyncio.run(run())
    except KeyboardInterrupt:
        logger.info("Server stopped by user.") 